import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data['Age']) #Menampilkan data berdasarkan kolom

print(csv_data.iloc[1]) #Menampilkan data berdasarkan baris

print(csv_data['Age'].iloc[1]) #Menampilkan satu buah data pada kolom "Age" dan baris ke-1

print(csv_data['Age'].iloc[5:10]) #Menampilkan data ke 5 sampai kurang dari 10

print(csv_data.head()) #Menampilkan cuplikan dataset

print(csv_data.describe()) #Menampilkan informasi statistik
print(csv_data.describe(include='all')) #Menampilkan informasi statistik, jika ada data NaN. Karena ada data dalam bentuk string
print(csv_data.describe(exclude=['O'])) #Menampilkan informasi statistik, tetapi hanya menghitung data numeric saja

'''
Ketika terdapat missing value
Solusi pertama yang benar-benar kita anjurkan untuk kasus seperti ini adalah melakukan trace kembali ke sumber data atau memerika ulang record. 
Terutama jika data itu berasal dari human record. 
Sangat disarankan untuk menelusuri kembali agar tidak terjadi kesalahan ketika sudah mencapai titik analisa.
'''
import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data_missingvalue.csv")

print(csv_data.isnull().values.any()) #Menampilkan nilai boolean apakah di dalam dataset terdapat missing value. Jika ada maka True, jika tidak maka False

'''
Salah satu cara handling missing value adalah dengan imputation. 
Salah satu metode nya untuk general problem adalah dengan mengisi NaN dengan mean dari kolom.
'''
#Mean, untuk data outlier lemah. Karena mean melakukan perhitungan dengan semua data, termasuk outlier. Sehingga untuk outlier kuat kurang baik
print(csv_data.mean()) #Menampilkan mean dari tiap kolom
csv_data=csv_data.fillna(csv_data.mean()) #Mengisi nilai NaN setiap kolom dengan meannya

#Median, untuk data outlier kuat. Karena median hanya mengambil nilai tengah, tidak melakukan perhitungan dengan outlier
print(csv_data.median()) #Menampilkan nilai median tiap kolom
csv_data=csv_data.fillna(csv_data.median()) #Mengisi nilai NaN setiap kolom dengan mediannya

'''
Normalisasi data. Biasanya dibutuhkan di dalam K-Mean atau Klusterisasi. Contoh kasusnya adalah, terdapat kolom usia, masa kerja, dan gaji.
Usia dan masa kerja memiliki range nilai puluhan, sedangkan gaji memiliki range nilai jutaan.
Perbedaan ini dapat menjadi masalah besar saat pengerjaan K-Mean atau Klusterisasi.

Terdapat beberapa metode normalisasi contohnya.
MinMax, Zscore, Decimal Scaling, Sigmoid, dan Softmax. Pemakaiannya tergantung pada kebutuhan dari dataset dan jenis analisa yang dilakukan.
'''
import pandas as pd
import numpy as np
from sklearn import preprocessing

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")
array = csv_data.values #Data mentah dalam bentuk array

#X merupakan matrix yang berisi fitur dari dataset yang akan digunakan
#arrayx[row_index,column_index]

X = array[:,2:5] #memisahkan fitur dari dataset. Mengambil fitur/label. Karena di dalam value arraynya, semuanya berada pada index array ke- 2 sampai 5
Y = array[:,0:1]  #memisahkan class dari dataset. Mengambil data ID, karena di dalam value arraynya, karena ID berada pada index array ke-

dataset=pd.DataFrame({'Customer ID':array[:,0],'Gender':array[:,1],'Age':array[:,2],'Income':array[:,3],'Spending Score':array[:,4]})
print("dataset sebelum dinormalisasi :")
print(dataset.head(10))

min_max_scaler = preprocessing.MinMaxScaler(feature_range=(0,1)) #inisialisasi normalisasi MinMax
data = min_max_scaler.fit_transform(X) #transformasi MinMax untuk fitur
dataset = pd.DataFrame({'Age':data[:,0],'Income':data[:,1],'Spending Score':data[:,2],'Customer ID':array[:,0],'Gender':array[:,1]})

print("dataset setelah dinormalisasi :")
print(dataset.head(10))



